<?php

namespace Izzle\Translation\Test\Services;

use InvalidArgumentException;
use Izzle\Translation\ParameterEnclosure;
use Izzle\Translation\Services\Translation;
use PHPUnit\Framework\TestCase;

/**
 * Class TranslationTest
 * @package Izzle\Translation\Test\Services
 */
class TranslationTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        
        Translation::load(__DIR__ . '/../I18n/de_DE.json');
    }
    
    public function testCanLoad()
    {
        $this->expectException(InvalidArgumentException::class);
        Translation::load('file_not_exists');
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanTranslate()
    {
        $this->assertEquals('Speichern', Translation::translate('global.save'));
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanTranslateWithParameters()
    {
        $this->assertEquals('Hallo Dave', Translation::translate('global.hello', ['Dave']));
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanTranslateFromNode()
    {
        Translation::load(__DIR__ . '/../I18n/de_DE.json', new ParameterEnclosure(), 'de_DE');
    
        $this->assertEquals('Speichern', Translation::translate('global.save'));
        $this->assertEquals('Hallo Dave', Translation::translate('global.hello', ['Dave']));
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanSwitchLanguageFiles()
    {
        $this->assertEquals('Speichern', Translation::translate('global.save'));
    
        Translation::load(__DIR__ . '/../I18n/en_GB.json');
    
        $this->assertEquals('Save', Translation::translate('global.save'));
        $this->assertEquals('Hello Dave', Translation::translate('global.hello', ['Dave']));
    }
    
    public function testCanUseOtherParameterEnclosure()
    {
        Translation::setEnclosure(new ParameterEnclosure(ParameterEnclosure::ENCLOSURE_COLON));
    
        $this->assertEquals('Berlin: 23 Â°C', Translation::translate('global.temperature', ['Berlin', '23']));
    }
}
