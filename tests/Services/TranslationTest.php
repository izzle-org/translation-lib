<?php

namespace Izzle\Translation\Test\Services;

use InvalidArgumentException;
use Izzle\Translation\Exceptions\TranslationException;
use Izzle\Translation\ParameterEnclosure;
use Izzle\Translation\Services\Translation;
use PHPUnit\Framework\TestCase;

/**
 * Class TranslationTest
 * @package Izzle\Translation\Test\Services
 */
class TranslationTest extends TestCase
{
    /**
     * @var Translation
     */
    private $translation;
    
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        
        $this->translation = new Translation(__DIR__ . '/../I18n/de_DE.json');
    }
    
    public function testCanLoad(): void
    {
        $this->expectException(InvalidArgumentException::class);
        $this->translation->load('file_not_exists');
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanTranslate(): void
    {
        self::assertEquals('Speichern', $this->translation->translate('global.save'));
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanTranslateWithParameters(): void
    {
        self::assertEquals('Hallo Dave', $this->translation->translate('global.hello', ['Dave']));
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanTranslateFromNode(): void
    {
        $this->translation->load(__DIR__ . '/../I18n/de_DE.json', new ParameterEnclosure(), 'de_DE');
    
        self::assertEquals('Speichern', $this->translation->translate('global.save'));
        self::assertEquals('Hallo Dave', $this->translation->translate('global.hello', ['Dave']));
    }
    
    /**
     * @depends testCanLoad
     */
    public function testCanSwitchLanguageFiles(): void
    {
        self::assertEquals('Speichern', $this->translation->translate('global.save'));
    
        $this->translation->load(__DIR__ . '/../I18n/en_GB.json');
    
        self::assertEquals('Save', $this->translation->translate('global.save'));
        self::assertEquals('Hello Dave', $this->translation->translate('global.hello', ['Dave']));
    }
    
    public function testCanUseOtherParameterEnclosure(): void
    {
        $this->translation->setEnclosure(new ParameterEnclosure(ParameterEnclosure::ENCLOSURE_COLON));
    
        self::assertEquals('Berlin: 23 Â°C', $this->translation->translate('global.temperature', ['Berlin', '23']));
    }
}
